// automatically generated by the FlatBuffers compiler, do not modify

package flats

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RpJoinRoom struct {
	_tab flatbuffers.Table
}

func GetRootAsRpJoinRoom(buf []byte, offset flatbuffers.UOffsetT) *RpJoinRoom {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RpJoinRoom{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RpJoinRoom) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RpJoinRoom) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RpJoinRoom) RoomId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RpJoinRoom) MutateRoomId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *RpJoinRoom) ChosenOne() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RpJoinRoom) MutateChosenOne(n int8) bool {
	return rcv._tab.MutateInt8Slot(6, n)
}

func (rcv *RpJoinRoom) MaxPlayerCountInRoom() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RpJoinRoom) MutateMaxPlayerCountInRoom(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func RpJoinRoomStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RpJoinRoomAddRoomId(builder *flatbuffers.Builder, RoomId uint32) {
	builder.PrependUint32Slot(0, RoomId, 0)
}
func RpJoinRoomAddChosenOne(builder *flatbuffers.Builder, ChosenOne int8) {
	builder.PrependInt8Slot(1, ChosenOne, 0)
}
func RpJoinRoomAddMaxPlayerCountInRoom(builder *flatbuffers.Builder, MaxPlayerCountInRoom byte) {
	builder.PrependByteSlot(2, MaxPlayerCountInRoom, 0)
}
func RpJoinRoomEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
