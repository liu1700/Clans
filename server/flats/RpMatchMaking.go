// automatically generated by the FlatBuffers compiler, do not modify

package flats

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RpMatchMaking struct {
	_tab flatbuffers.Table
}

func GetRootAsRpMatchMaking(buf []byte, offset flatbuffers.UOffsetT) *RpMatchMaking {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RpMatchMaking{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RpMatchMaking) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RpMatchMaking) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RpMatchMaking) UserId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RpMatchMaking) MutateUserId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *RpMatchMaking) IsJoin() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RpMatchMaking) MutateIsJoin(n int8) bool {
	return rcv._tab.MutateInt8Slot(6, n)
}

func RpMatchMakingStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func RpMatchMakingAddUserId(builder *flatbuffers.Builder, userId uint32) {
	builder.PrependUint32Slot(0, userId, 0)
}
func RpMatchMakingAddIsJoin(builder *flatbuffers.Builder, isJoin int8) {
	builder.PrependInt8Slot(1, isJoin, 0)
}
func RpMatchMakingEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
