// automatically generated by the FlatBuffers compiler, do not modify

package flats

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RpStartMatchMaking struct {
	_tab flatbuffers.Table
}

func GetRootAsRpStartMatchMaking(buf []byte, offset flatbuffers.UOffsetT) *RpStartMatchMaking {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RpStartMatchMaking{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RpStartMatchMaking) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RpStartMatchMaking) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RpStartMatchMaking) BattleServerIp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RpStartMatchMaking) ServerPort() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RpStartMatchMaking) MutateServerPort(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func RpStartMatchMakingStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func RpStartMatchMakingAddBattleServerIp(builder *flatbuffers.Builder, battleServerIp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(battleServerIp), 0)
}
func RpStartMatchMakingAddServerPort(builder *flatbuffers.Builder, serverPort uint16) {
	builder.PrependUint16Slot(1, serverPort, 0)
}
func RpStartMatchMakingEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
