// automatically generated by the FlatBuffers compiler, do not modify

package flats

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RpPlayerSpawn struct {
	_tab flatbuffers.Table
}

func GetRootAsRpPlayerSpawn(buf []byte, offset flatbuffers.UOffsetT) *RpPlayerSpawn {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RpPlayerSpawn{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RpPlayerSpawn) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RpPlayerSpawn) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RpPlayerSpawn) Pid() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RpPlayerSpawn) MutatePid(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *RpPlayerSpawn) SpawnAtX() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RpPlayerSpawn) MutateSpawnAtX(n int16) bool {
	return rcv._tab.MutateInt16Slot(6, n)
}

func (rcv *RpPlayerSpawn) SpawnAtY() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RpPlayerSpawn) MutateSpawnAtY(n int16) bool {
	return rcv._tab.MutateInt16Slot(8, n)
}

func (rcv *RpPlayerSpawn) Health() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RpPlayerSpawn) MutateHealth(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *RpPlayerSpawn) Shield() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RpPlayerSpawn) MutateShield(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func RpPlayerSpawnStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func RpPlayerSpawnAddPid(builder *flatbuffers.Builder, pid byte) {
	builder.PrependByteSlot(0, pid, 0)
}
func RpPlayerSpawnAddSpawnAtX(builder *flatbuffers.Builder, spawnAtX int16) {
	builder.PrependInt16Slot(1, spawnAtX, 0)
}
func RpPlayerSpawnAddSpawnAtY(builder *flatbuffers.Builder, spawnAtY int16) {
	builder.PrependInt16Slot(2, spawnAtY, 0)
}
func RpPlayerSpawnAddHealth(builder *flatbuffers.Builder, health byte) {
	builder.PrependByteSlot(3, health, 0)
}
func RpPlayerSpawnAddShield(builder *flatbuffers.Builder, shield byte) {
	builder.PrependByteSlot(4, shield, 0)
}
func RpPlayerSpawnEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
